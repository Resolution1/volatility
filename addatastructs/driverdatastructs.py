#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Jul 25 09:53:26 2014 by generateDS.py version 2.12e.
#
# Command line options:
#   ('-o', '..\\..\\rekall\\driverdatastructs.py')
#   ('--external-encoding', 'utf-8')
#
# Command line arguments:
#   driver.xsd
#
# Command line:
#   C:\Python27\Scripts\generateDS.py -o "..\..\rekall\driverdatastructs.py" --external-encoding="utf-8" driver.xsd
#
# Current working directory (os.getcwd()):
#   autogenerate
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class root(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Driver=None):
        self.original_tagname_ = None
        if Driver is None:
            self.Driver = []
        else:
            self.Driver = Driver
    def factory(*args_, **kwargs_):
        if root.subclass:
            return root.subclass(*args_, **kwargs_)
        else:
            return root(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Driver(self): return self.Driver
    def set_Driver(self, Driver): self.Driver = Driver
    def add_Driver(self, value): self.Driver.append(value)
    def insert_Driver_at(self, index, value): self.Driver.insert(index, value)
    def replace_Driver_at(self, index, value): self.Driver[index] = value
    def hasContent_(self):
        if (
            self.Driver
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='root', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='root')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='root', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='root'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='root', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Driver_ in self.Driver:
            Driver_.export(outfile, level, namespace_, name_='Driver', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='root'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Driver=[\n')
        level += 1
        for Driver_ in self.Driver:
            showIndent(outfile, level)
            outfile.write('model_.DriverType(\n')
            Driver_.exportLiteral(outfile, level, name_='DriverType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Driver':
            obj_ = DriverType.factory()
            obj_.build(child_)
            self.Driver.append(obj_)
            obj_.original_tagname_ = 'Driver'
# end class root


class DriverType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resultitemtype=None, ServiceKeyName=None, ImagePath=None, Type=None, DriverObj_Location=None, DeviceObj_Location=None, Driver_Init=None, Driver_StartIO=None, Driver_Unload=None, BaseAddress=None, StartTime=None, Dependencies=None, Size=None, Instances=None, Name=None, StartedAs=None, State=None, RealState=None, StartMode=None, RealStartMode=None, RealType=None, Path=None, plist=None, MD5=None, SHA1=None, FuzzySize=None, Fuzzy=None, Fuzzy2X=None, KFFStatus=None, processid=None, IRP_MJ_CREATE=None, IRP_MJ_CREATE_NAMED_PIPE=None, IRP_MJ_CLOSE=None, IRP_MJ_READ=None, IRP_MJ_WRITE=None, IRP_MJ_QUERY_INFORMATION=None, IRP_MJ_SET_INFORMATION=None, IRP_MJ_QUERY_EA=None, IRP_MJ_SET_EA=None, IRP_MJ_FLUSH_BUFFERS=None, IRP_MJ_QUERY_VOLUME_INFORMATION=None, IRP_MJ_SET_VOLUME_INFORMATION=None, IRP_MJ_DIRECTORY_CONTROL=None, IRP_MJ_FILE_SYSTEM_CONTROL=None, IRP_MJ_DEVICE_CONTROL=None, IRP_MJ_INTERNAL_DEVICE_CONTROL=None, IRP_MJ_SHUTDOWN=None, IRP_MJ_LOCK_CONTROL=None, IRP_MJ_CLEANUP=None, IRP_MJ_CREATE_MAILSLOT=None, IRP_MJ_QUERY_SECURITY=None, IRP_MJ_SET_SECURITY=None, IRP_MJ_POWER=None, IRP_MJ_SYSTEM_CONTROL=None, IRP_MJ_DEVICE_CHANGE=None, IRP_MJ_QUERY_QUOTA=None, IRP_MJ_SET_QUOTA=None, IRP_MJ_PNP=None, Driver_Device_List=None):
        self.original_tagname_ = None
        self.resultitemtype = _cast(int, resultitemtype)
        self.ServiceKeyName = ServiceKeyName
        self.ImagePath = ImagePath
        self.Type = Type
        self.DriverObj_Location = DriverObj_Location
        self.DeviceObj_Location = DeviceObj_Location
        self.Driver_Init = Driver_Init
        self.Driver_StartIO = Driver_StartIO
        self.Driver_Unload = Driver_Unload
        self.BaseAddress = BaseAddress
        self.StartTime = StartTime
        self.Dependencies = Dependencies
        self.Size = Size
        self.Instances = Instances
        self.Name = Name
        self.StartedAs = StartedAs
        self.State = State
        self.RealState = RealState
        self.StartMode = StartMode
        self.RealStartMode = RealStartMode
        self.RealType = RealType
        self.Path = Path
        self.plist = plist
        self.MD5 = MD5
        self.SHA1 = SHA1
        self.FuzzySize = FuzzySize
        self.Fuzzy = Fuzzy
        self.Fuzzy2X = Fuzzy2X
        self.KFFStatus = KFFStatus
        self.processid = processid
        self.IRP_MJ_CREATE = IRP_MJ_CREATE
        self.IRP_MJ_CREATE_NAMED_PIPE = IRP_MJ_CREATE_NAMED_PIPE
        self.IRP_MJ_CLOSE = IRP_MJ_CLOSE
        self.IRP_MJ_READ = IRP_MJ_READ
        self.IRP_MJ_WRITE = IRP_MJ_WRITE
        self.IRP_MJ_QUERY_INFORMATION = IRP_MJ_QUERY_INFORMATION
        self.IRP_MJ_SET_INFORMATION = IRP_MJ_SET_INFORMATION
        self.IRP_MJ_QUERY_EA = IRP_MJ_QUERY_EA
        self.IRP_MJ_SET_EA = IRP_MJ_SET_EA
        self.IRP_MJ_FLUSH_BUFFERS = IRP_MJ_FLUSH_BUFFERS
        self.IRP_MJ_QUERY_VOLUME_INFORMATION = IRP_MJ_QUERY_VOLUME_INFORMATION
        self.IRP_MJ_SET_VOLUME_INFORMATION = IRP_MJ_SET_VOLUME_INFORMATION
        self.IRP_MJ_DIRECTORY_CONTROL = IRP_MJ_DIRECTORY_CONTROL
        self.IRP_MJ_FILE_SYSTEM_CONTROL = IRP_MJ_FILE_SYSTEM_CONTROL
        self.IRP_MJ_DEVICE_CONTROL = IRP_MJ_DEVICE_CONTROL
        self.IRP_MJ_INTERNAL_DEVICE_CONTROL = IRP_MJ_INTERNAL_DEVICE_CONTROL
        self.IRP_MJ_SHUTDOWN = IRP_MJ_SHUTDOWN
        self.IRP_MJ_LOCK_CONTROL = IRP_MJ_LOCK_CONTROL
        self.IRP_MJ_CLEANUP = IRP_MJ_CLEANUP
        self.IRP_MJ_CREATE_MAILSLOT = IRP_MJ_CREATE_MAILSLOT
        self.IRP_MJ_QUERY_SECURITY = IRP_MJ_QUERY_SECURITY
        self.IRP_MJ_SET_SECURITY = IRP_MJ_SET_SECURITY
        self.IRP_MJ_POWER = IRP_MJ_POWER
        self.IRP_MJ_SYSTEM_CONTROL = IRP_MJ_SYSTEM_CONTROL
        self.IRP_MJ_DEVICE_CHANGE = IRP_MJ_DEVICE_CHANGE
        self.IRP_MJ_QUERY_QUOTA = IRP_MJ_QUERY_QUOTA
        self.IRP_MJ_SET_QUOTA = IRP_MJ_SET_QUOTA
        self.IRP_MJ_PNP = IRP_MJ_PNP
        self.Driver_Device_List = Driver_Device_List
    def factory(*args_, **kwargs_):
        if DriverType.subclass:
            return DriverType.subclass(*args_, **kwargs_)
        else:
            return DriverType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceKeyName(self): return self.ServiceKeyName
    def set_ServiceKeyName(self, ServiceKeyName): self.ServiceKeyName = ServiceKeyName
    def get_ImagePath(self): return self.ImagePath
    def set_ImagePath(self, ImagePath): self.ImagePath = ImagePath
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_DriverObj_Location(self): return self.DriverObj_Location
    def set_DriverObj_Location(self, DriverObj_Location): self.DriverObj_Location = DriverObj_Location
    def get_DeviceObj_Location(self): return self.DeviceObj_Location
    def set_DeviceObj_Location(self, DeviceObj_Location): self.DeviceObj_Location = DeviceObj_Location
    def get_Driver_Init(self): return self.Driver_Init
    def set_Driver_Init(self, Driver_Init): self.Driver_Init = Driver_Init
    def get_Driver_StartIO(self): return self.Driver_StartIO
    def set_Driver_StartIO(self, Driver_StartIO): self.Driver_StartIO = Driver_StartIO
    def get_Driver_Unload(self): return self.Driver_Unload
    def set_Driver_Unload(self, Driver_Unload): self.Driver_Unload = Driver_Unload
    def get_BaseAddress(self): return self.BaseAddress
    def set_BaseAddress(self, BaseAddress): self.BaseAddress = BaseAddress
    def get_StartTime(self): return self.StartTime
    def set_StartTime(self, StartTime): self.StartTime = StartTime
    def get_Dependencies(self): return self.Dependencies
    def set_Dependencies(self, Dependencies): self.Dependencies = Dependencies
    def get_Size(self): return self.Size
    def set_Size(self, Size): self.Size = Size
    def get_Instances(self): return self.Instances
    def set_Instances(self, Instances): self.Instances = Instances
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_StartedAs(self): return self.StartedAs
    def set_StartedAs(self, StartedAs): self.StartedAs = StartedAs
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_RealState(self): return self.RealState
    def set_RealState(self, RealState): self.RealState = RealState
    def get_StartMode(self): return self.StartMode
    def set_StartMode(self, StartMode): self.StartMode = StartMode
    def get_RealStartMode(self): return self.RealStartMode
    def set_RealStartMode(self, RealStartMode): self.RealStartMode = RealStartMode
    def get_RealType(self): return self.RealType
    def set_RealType(self, RealType): self.RealType = RealType
    def get_Path(self): return self.Path
    def set_Path(self, Path): self.Path = Path
    def get_plist(self): return self.plist
    def set_plist(self, plist): self.plist = plist
    def get_MD5(self): return self.MD5
    def set_MD5(self, MD5): self.MD5 = MD5
    def get_SHA1(self): return self.SHA1
    def set_SHA1(self, SHA1): self.SHA1 = SHA1
    def get_FuzzySize(self): return self.FuzzySize
    def set_FuzzySize(self, FuzzySize): self.FuzzySize = FuzzySize
    def get_Fuzzy(self): return self.Fuzzy
    def set_Fuzzy(self, Fuzzy): self.Fuzzy = Fuzzy
    def get_Fuzzy2X(self): return self.Fuzzy2X
    def set_Fuzzy2X(self, Fuzzy2X): self.Fuzzy2X = Fuzzy2X
    def get_KFFStatus(self): return self.KFFStatus
    def set_KFFStatus(self, KFFStatus): self.KFFStatus = KFFStatus
    def get_processid(self): return self.processid
    def set_processid(self, processid): self.processid = processid
    def get_IRP_MJ_CREATE(self): return self.IRP_MJ_CREATE
    def set_IRP_MJ_CREATE(self, IRP_MJ_CREATE): self.IRP_MJ_CREATE = IRP_MJ_CREATE
    def get_IRP_MJ_CREATE_NAMED_PIPE(self): return self.IRP_MJ_CREATE_NAMED_PIPE
    def set_IRP_MJ_CREATE_NAMED_PIPE(self, IRP_MJ_CREATE_NAMED_PIPE): self.IRP_MJ_CREATE_NAMED_PIPE = IRP_MJ_CREATE_NAMED_PIPE
    def get_IRP_MJ_CLOSE(self): return self.IRP_MJ_CLOSE
    def set_IRP_MJ_CLOSE(self, IRP_MJ_CLOSE): self.IRP_MJ_CLOSE = IRP_MJ_CLOSE
    def get_IRP_MJ_READ(self): return self.IRP_MJ_READ
    def set_IRP_MJ_READ(self, IRP_MJ_READ): self.IRP_MJ_READ = IRP_MJ_READ
    def get_IRP_MJ_WRITE(self): return self.IRP_MJ_WRITE
    def set_IRP_MJ_WRITE(self, IRP_MJ_WRITE): self.IRP_MJ_WRITE = IRP_MJ_WRITE
    def get_IRP_MJ_QUERY_INFORMATION(self): return self.IRP_MJ_QUERY_INFORMATION
    def set_IRP_MJ_QUERY_INFORMATION(self, IRP_MJ_QUERY_INFORMATION): self.IRP_MJ_QUERY_INFORMATION = IRP_MJ_QUERY_INFORMATION
    def get_IRP_MJ_SET_INFORMATION(self): return self.IRP_MJ_SET_INFORMATION
    def set_IRP_MJ_SET_INFORMATION(self, IRP_MJ_SET_INFORMATION): self.IRP_MJ_SET_INFORMATION = IRP_MJ_SET_INFORMATION
    def get_IRP_MJ_QUERY_EA(self): return self.IRP_MJ_QUERY_EA
    def set_IRP_MJ_QUERY_EA(self, IRP_MJ_QUERY_EA): self.IRP_MJ_QUERY_EA = IRP_MJ_QUERY_EA
    def get_IRP_MJ_SET_EA(self): return self.IRP_MJ_SET_EA
    def set_IRP_MJ_SET_EA(self, IRP_MJ_SET_EA): self.IRP_MJ_SET_EA = IRP_MJ_SET_EA
    def get_IRP_MJ_FLUSH_BUFFERS(self): return self.IRP_MJ_FLUSH_BUFFERS
    def set_IRP_MJ_FLUSH_BUFFERS(self, IRP_MJ_FLUSH_BUFFERS): self.IRP_MJ_FLUSH_BUFFERS = IRP_MJ_FLUSH_BUFFERS
    def get_IRP_MJ_QUERY_VOLUME_INFORMATION(self): return self.IRP_MJ_QUERY_VOLUME_INFORMATION
    def set_IRP_MJ_QUERY_VOLUME_INFORMATION(self, IRP_MJ_QUERY_VOLUME_INFORMATION): self.IRP_MJ_QUERY_VOLUME_INFORMATION = IRP_MJ_QUERY_VOLUME_INFORMATION
    def get_IRP_MJ_SET_VOLUME_INFORMATION(self): return self.IRP_MJ_SET_VOLUME_INFORMATION
    def set_IRP_MJ_SET_VOLUME_INFORMATION(self, IRP_MJ_SET_VOLUME_INFORMATION): self.IRP_MJ_SET_VOLUME_INFORMATION = IRP_MJ_SET_VOLUME_INFORMATION
    def get_IRP_MJ_DIRECTORY_CONTROL(self): return self.IRP_MJ_DIRECTORY_CONTROL
    def set_IRP_MJ_DIRECTORY_CONTROL(self, IRP_MJ_DIRECTORY_CONTROL): self.IRP_MJ_DIRECTORY_CONTROL = IRP_MJ_DIRECTORY_CONTROL
    def get_IRP_MJ_FILE_SYSTEM_CONTROL(self): return self.IRP_MJ_FILE_SYSTEM_CONTROL
    def set_IRP_MJ_FILE_SYSTEM_CONTROL(self, IRP_MJ_FILE_SYSTEM_CONTROL): self.IRP_MJ_FILE_SYSTEM_CONTROL = IRP_MJ_FILE_SYSTEM_CONTROL
    def get_IRP_MJ_DEVICE_CONTROL(self): return self.IRP_MJ_DEVICE_CONTROL
    def set_IRP_MJ_DEVICE_CONTROL(self, IRP_MJ_DEVICE_CONTROL): self.IRP_MJ_DEVICE_CONTROL = IRP_MJ_DEVICE_CONTROL
    def get_IRP_MJ_INTERNAL_DEVICE_CONTROL(self): return self.IRP_MJ_INTERNAL_DEVICE_CONTROL
    def set_IRP_MJ_INTERNAL_DEVICE_CONTROL(self, IRP_MJ_INTERNAL_DEVICE_CONTROL): self.IRP_MJ_INTERNAL_DEVICE_CONTROL = IRP_MJ_INTERNAL_DEVICE_CONTROL
    def get_IRP_MJ_SHUTDOWN(self): return self.IRP_MJ_SHUTDOWN
    def set_IRP_MJ_SHUTDOWN(self, IRP_MJ_SHUTDOWN): self.IRP_MJ_SHUTDOWN = IRP_MJ_SHUTDOWN
    def get_IRP_MJ_LOCK_CONTROL(self): return self.IRP_MJ_LOCK_CONTROL
    def set_IRP_MJ_LOCK_CONTROL(self, IRP_MJ_LOCK_CONTROL): self.IRP_MJ_LOCK_CONTROL = IRP_MJ_LOCK_CONTROL
    def get_IRP_MJ_CLEANUP(self): return self.IRP_MJ_CLEANUP
    def set_IRP_MJ_CLEANUP(self, IRP_MJ_CLEANUP): self.IRP_MJ_CLEANUP = IRP_MJ_CLEANUP
    def get_IRP_MJ_CREATE_MAILSLOT(self): return self.IRP_MJ_CREATE_MAILSLOT
    def set_IRP_MJ_CREATE_MAILSLOT(self, IRP_MJ_CREATE_MAILSLOT): self.IRP_MJ_CREATE_MAILSLOT = IRP_MJ_CREATE_MAILSLOT
    def get_IRP_MJ_QUERY_SECURITY(self): return self.IRP_MJ_QUERY_SECURITY
    def set_IRP_MJ_QUERY_SECURITY(self, IRP_MJ_QUERY_SECURITY): self.IRP_MJ_QUERY_SECURITY = IRP_MJ_QUERY_SECURITY
    def get_IRP_MJ_SET_SECURITY(self): return self.IRP_MJ_SET_SECURITY
    def set_IRP_MJ_SET_SECURITY(self, IRP_MJ_SET_SECURITY): self.IRP_MJ_SET_SECURITY = IRP_MJ_SET_SECURITY
    def get_IRP_MJ_POWER(self): return self.IRP_MJ_POWER
    def set_IRP_MJ_POWER(self, IRP_MJ_POWER): self.IRP_MJ_POWER = IRP_MJ_POWER
    def get_IRP_MJ_SYSTEM_CONTROL(self): return self.IRP_MJ_SYSTEM_CONTROL
    def set_IRP_MJ_SYSTEM_CONTROL(self, IRP_MJ_SYSTEM_CONTROL): self.IRP_MJ_SYSTEM_CONTROL = IRP_MJ_SYSTEM_CONTROL
    def get_IRP_MJ_DEVICE_CHANGE(self): return self.IRP_MJ_DEVICE_CHANGE
    def set_IRP_MJ_DEVICE_CHANGE(self, IRP_MJ_DEVICE_CHANGE): self.IRP_MJ_DEVICE_CHANGE = IRP_MJ_DEVICE_CHANGE
    def get_IRP_MJ_QUERY_QUOTA(self): return self.IRP_MJ_QUERY_QUOTA
    def set_IRP_MJ_QUERY_QUOTA(self, IRP_MJ_QUERY_QUOTA): self.IRP_MJ_QUERY_QUOTA = IRP_MJ_QUERY_QUOTA
    def get_IRP_MJ_SET_QUOTA(self): return self.IRP_MJ_SET_QUOTA
    def set_IRP_MJ_SET_QUOTA(self, IRP_MJ_SET_QUOTA): self.IRP_MJ_SET_QUOTA = IRP_MJ_SET_QUOTA
    def get_IRP_MJ_PNP(self): return self.IRP_MJ_PNP
    def set_IRP_MJ_PNP(self, IRP_MJ_PNP): self.IRP_MJ_PNP = IRP_MJ_PNP
    def get_Driver_Device_List(self): return self.Driver_Device_List
    def set_Driver_Device_List(self, Driver_Device_List): self.Driver_Device_List = Driver_Device_List
    def get_resultitemtype(self): return self.resultitemtype
    def set_resultitemtype(self, resultitemtype): self.resultitemtype = resultitemtype
    def hasContent_(self):
        if (
            self.ServiceKeyName is not None or
            self.ImagePath is not None or
            self.Type is not None or
            self.DriverObj_Location is not None or
            self.DeviceObj_Location is not None or
            self.Driver_Init is not None or
            self.Driver_StartIO is not None or
            self.Driver_Unload is not None or
            self.BaseAddress is not None or
            self.StartTime is not None or
            self.Dependencies is not None or
            self.Size is not None or
            self.Instances is not None or
            self.Name is not None or
            self.StartedAs is not None or
            self.State is not None or
            self.RealState is not None or
            self.StartMode is not None or
            self.RealStartMode is not None or
            self.RealType is not None or
            self.Path is not None or
            self.plist is not None or
            self.MD5 is not None or
            self.SHA1 is not None or
            self.FuzzySize is not None or
            self.Fuzzy is not None or
            self.Fuzzy2X is not None or
            self.KFFStatus is not None or
            self.processid is not None or
            self.IRP_MJ_CREATE is not None or
            self.IRP_MJ_CREATE_NAMED_PIPE is not None or
            self.IRP_MJ_CLOSE is not None or
            self.IRP_MJ_READ is not None or
            self.IRP_MJ_WRITE is not None or
            self.IRP_MJ_QUERY_INFORMATION is not None or
            self.IRP_MJ_SET_INFORMATION is not None or
            self.IRP_MJ_QUERY_EA is not None or
            self.IRP_MJ_SET_EA is not None or
            self.IRP_MJ_FLUSH_BUFFERS is not None or
            self.IRP_MJ_QUERY_VOLUME_INFORMATION is not None or
            self.IRP_MJ_SET_VOLUME_INFORMATION is not None or
            self.IRP_MJ_DIRECTORY_CONTROL is not None or
            self.IRP_MJ_FILE_SYSTEM_CONTROL is not None or
            self.IRP_MJ_DEVICE_CONTROL is not None or
            self.IRP_MJ_INTERNAL_DEVICE_CONTROL is not None or
            self.IRP_MJ_SHUTDOWN is not None or
            self.IRP_MJ_LOCK_CONTROL is not None or
            self.IRP_MJ_CLEANUP is not None or
            self.IRP_MJ_CREATE_MAILSLOT is not None or
            self.IRP_MJ_QUERY_SECURITY is not None or
            self.IRP_MJ_SET_SECURITY is not None or
            self.IRP_MJ_POWER is not None or
            self.IRP_MJ_SYSTEM_CONTROL is not None or
            self.IRP_MJ_DEVICE_CHANGE is not None or
            self.IRP_MJ_QUERY_QUOTA is not None or
            self.IRP_MJ_SET_QUOTA is not None or
            self.IRP_MJ_PNP is not None or
            self.Driver_Device_List is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DriverType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DriverType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DriverType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DriverType'):
        if self.resultitemtype is not None and 'resultitemtype' not in already_processed:
            already_processed.add('resultitemtype')
            outfile.write(' resultitemtype="%s"' % self.gds_format_integer(self.resultitemtype, input_name='resultitemtype'))
    def exportChildren(self, outfile, level, namespace_='', name_='DriverType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceKeyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceKeyName>%s</%sServiceKeyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceKeyName).encode(ExternalEncoding), input_name='ServiceKeyName'), namespace_, eol_))
        if self.ImagePath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImagePath>%s</%sImagePath>%s' % (namespace_, self.gds_format_string(quote_xml(self.ImagePath).encode(ExternalEncoding), input_name='ImagePath'), namespace_, eol_))
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespace_, self.gds_format_integer(self.Type, input_name='Type'), namespace_, eol_))
        if self.DriverObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDriverObj_Location>%s</%sDriverObj_Location>%s' % (namespace_, self.gds_format_integer(self.DriverObj_Location, input_name='DriverObj_Location'), namespace_, eol_))
        if self.DeviceObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeviceObj_Location>%s</%sDeviceObj_Location>%s' % (namespace_, self.gds_format_integer(self.DeviceObj_Location, input_name='DeviceObj_Location'), namespace_, eol_))
        if self.Driver_Init is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDriver_Init>%s</%sDriver_Init>%s' % (namespace_, self.gds_format_integer(self.Driver_Init, input_name='Driver_Init'), namespace_, eol_))
        if self.Driver_StartIO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDriver_StartIO>%s</%sDriver_StartIO>%s' % (namespace_, self.gds_format_integer(self.Driver_StartIO, input_name='Driver_StartIO'), namespace_, eol_))
        if self.Driver_Unload is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDriver_Unload>%s</%sDriver_Unload>%s' % (namespace_, self.gds_format_integer(self.Driver_Unload, input_name='Driver_Unload'), namespace_, eol_))
        if self.BaseAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaseAddress>%s</%sBaseAddress>%s' % (namespace_, self.gds_format_integer(self.BaseAddress, input_name='BaseAddress'), namespace_, eol_))
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartTime>%s</%sStartTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.StartTime).encode(ExternalEncoding), input_name='StartTime'), namespace_, eol_))
        if self.Dependencies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDependencies>%s</%sDependencies>%s' % (namespace_, self.gds_format_string(quote_xml(self.Dependencies).encode(ExternalEncoding), input_name='Dependencies'), namespace_, eol_))
        if self.Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSize>%s</%sSize>%s' % (namespace_, self.gds_format_integer(self.Size, input_name='Size'), namespace_, eol_))
        if self.Instances is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstances>%s</%sInstances>%s' % (namespace_, self.gds_format_integer(self.Instances, input_name='Instances'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.StartedAs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartedAs>%s</%sStartedAs>%s' % (namespace_, self.gds_format_string(quote_xml(self.StartedAs).encode(ExternalEncoding), input_name='StartedAs'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_integer(self.State, input_name='State'), namespace_, eol_))
        if self.RealState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealState>%s</%sRealState>%s' % (namespace_, self.gds_format_integer(self.RealState, input_name='RealState'), namespace_, eol_))
        if self.StartMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartMode>%s</%sStartMode>%s' % (namespace_, self.gds_format_integer(self.StartMode, input_name='StartMode'), namespace_, eol_))
        if self.RealStartMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealStartMode>%s</%sRealStartMode>%s' % (namespace_, self.gds_format_integer(self.RealStartMode, input_name='RealStartMode'), namespace_, eol_))
        if self.RealType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealType>%s</%sRealType>%s' % (namespace_, self.gds_format_integer(self.RealType, input_name='RealType'), namespace_, eol_))
        if self.Path is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPath>%s</%sPath>%s' % (namespace_, self.gds_format_string(quote_xml(self.Path).encode(ExternalEncoding), input_name='Path'), namespace_, eol_))
        if self.plist is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splist>%s</%splist>%s' % (namespace_, self.gds_format_string(quote_xml(self.plist).encode(ExternalEncoding), input_name='plist'), namespace_, eol_))
        if self.MD5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMD5>%s</%sMD5>%s' % (namespace_, self.gds_format_string(quote_xml(self.MD5).encode(ExternalEncoding), input_name='MD5'), namespace_, eol_))
        if self.SHA1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHA1>%s</%sSHA1>%s' % (namespace_, self.gds_format_string(quote_xml(self.SHA1).encode(ExternalEncoding), input_name='SHA1'), namespace_, eol_))
        if self.FuzzySize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFuzzySize>%s</%sFuzzySize>%s' % (namespace_, self.gds_format_integer(self.FuzzySize, input_name='FuzzySize'), namespace_, eol_))
        if self.Fuzzy is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFuzzy>%s</%sFuzzy>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fuzzy).encode(ExternalEncoding), input_name='Fuzzy'), namespace_, eol_))
        if self.Fuzzy2X is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFuzzy2X>%s</%sFuzzy2X>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fuzzy2X).encode(ExternalEncoding), input_name='Fuzzy2X'), namespace_, eol_))
        if self.KFFStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKFFStatus>%s</%sKFFStatus>%s' % (namespace_, self.gds_format_integer(self.KFFStatus, input_name='KFFStatus'), namespace_, eol_))
        if self.processid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessid>%s</%sprocessid>%s' % (namespace_, self.gds_format_integer(self.processid, input_name='processid'), namespace_, eol_))
        if self.IRP_MJ_CREATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_CREATE>%s</%sIRP_MJ_CREATE>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_CREATE, input_name='IRP_MJ_CREATE'), namespace_, eol_))
        if self.IRP_MJ_CREATE_NAMED_PIPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_CREATE_NAMED_PIPE>%s</%sIRP_MJ_CREATE_NAMED_PIPE>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_CREATE_NAMED_PIPE, input_name='IRP_MJ_CREATE_NAMED_PIPE'), namespace_, eol_))
        if self.IRP_MJ_CLOSE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_CLOSE>%s</%sIRP_MJ_CLOSE>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_CLOSE, input_name='IRP_MJ_CLOSE'), namespace_, eol_))
        if self.IRP_MJ_READ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_READ>%s</%sIRP_MJ_READ>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_READ, input_name='IRP_MJ_READ'), namespace_, eol_))
        if self.IRP_MJ_WRITE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_WRITE>%s</%sIRP_MJ_WRITE>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_WRITE, input_name='IRP_MJ_WRITE'), namespace_, eol_))
        if self.IRP_MJ_QUERY_INFORMATION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_QUERY_INFORMATION>%s</%sIRP_MJ_QUERY_INFORMATION>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_QUERY_INFORMATION, input_name='IRP_MJ_QUERY_INFORMATION'), namespace_, eol_))
        if self.IRP_MJ_SET_INFORMATION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SET_INFORMATION>%s</%sIRP_MJ_SET_INFORMATION>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SET_INFORMATION, input_name='IRP_MJ_SET_INFORMATION'), namespace_, eol_))
        if self.IRP_MJ_QUERY_EA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_QUERY_EA>%s</%sIRP_MJ_QUERY_EA>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_QUERY_EA, input_name='IRP_MJ_QUERY_EA'), namespace_, eol_))
        if self.IRP_MJ_SET_EA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SET_EA>%s</%sIRP_MJ_SET_EA>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SET_EA, input_name='IRP_MJ_SET_EA'), namespace_, eol_))
        if self.IRP_MJ_FLUSH_BUFFERS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_FLUSH_BUFFERS>%s</%sIRP_MJ_FLUSH_BUFFERS>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_FLUSH_BUFFERS, input_name='IRP_MJ_FLUSH_BUFFERS'), namespace_, eol_))
        if self.IRP_MJ_QUERY_VOLUME_INFORMATION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_QUERY_VOLUME_INFORMATION>%s</%sIRP_MJ_QUERY_VOLUME_INFORMATION>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_QUERY_VOLUME_INFORMATION, input_name='IRP_MJ_QUERY_VOLUME_INFORMATION'), namespace_, eol_))
        if self.IRP_MJ_SET_VOLUME_INFORMATION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SET_VOLUME_INFORMATION>%s</%sIRP_MJ_SET_VOLUME_INFORMATION>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SET_VOLUME_INFORMATION, input_name='IRP_MJ_SET_VOLUME_INFORMATION'), namespace_, eol_))
        if self.IRP_MJ_DIRECTORY_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_DIRECTORY_CONTROL>%s</%sIRP_MJ_DIRECTORY_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_DIRECTORY_CONTROL, input_name='IRP_MJ_DIRECTORY_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_FILE_SYSTEM_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_FILE_SYSTEM_CONTROL>%s</%sIRP_MJ_FILE_SYSTEM_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_FILE_SYSTEM_CONTROL, input_name='IRP_MJ_FILE_SYSTEM_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_DEVICE_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_DEVICE_CONTROL>%s</%sIRP_MJ_DEVICE_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_DEVICE_CONTROL, input_name='IRP_MJ_DEVICE_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_INTERNAL_DEVICE_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_INTERNAL_DEVICE_CONTROL>%s</%sIRP_MJ_INTERNAL_DEVICE_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_INTERNAL_DEVICE_CONTROL, input_name='IRP_MJ_INTERNAL_DEVICE_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_SHUTDOWN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SHUTDOWN>%s</%sIRP_MJ_SHUTDOWN>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SHUTDOWN, input_name='IRP_MJ_SHUTDOWN'), namespace_, eol_))
        if self.IRP_MJ_LOCK_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_LOCK_CONTROL>%s</%sIRP_MJ_LOCK_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_LOCK_CONTROL, input_name='IRP_MJ_LOCK_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_CLEANUP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_CLEANUP>%s</%sIRP_MJ_CLEANUP>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_CLEANUP, input_name='IRP_MJ_CLEANUP'), namespace_, eol_))
        if self.IRP_MJ_CREATE_MAILSLOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_CREATE_MAILSLOT>%s</%sIRP_MJ_CREATE_MAILSLOT>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_CREATE_MAILSLOT, input_name='IRP_MJ_CREATE_MAILSLOT'), namespace_, eol_))
        if self.IRP_MJ_QUERY_SECURITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_QUERY_SECURITY>%s</%sIRP_MJ_QUERY_SECURITY>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_QUERY_SECURITY, input_name='IRP_MJ_QUERY_SECURITY'), namespace_, eol_))
        if self.IRP_MJ_SET_SECURITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SET_SECURITY>%s</%sIRP_MJ_SET_SECURITY>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SET_SECURITY, input_name='IRP_MJ_SET_SECURITY'), namespace_, eol_))
        if self.IRP_MJ_POWER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_POWER>%s</%sIRP_MJ_POWER>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_POWER, input_name='IRP_MJ_POWER'), namespace_, eol_))
        if self.IRP_MJ_SYSTEM_CONTROL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SYSTEM_CONTROL>%s</%sIRP_MJ_SYSTEM_CONTROL>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SYSTEM_CONTROL, input_name='IRP_MJ_SYSTEM_CONTROL'), namespace_, eol_))
        if self.IRP_MJ_DEVICE_CHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_DEVICE_CHANGE>%s</%sIRP_MJ_DEVICE_CHANGE>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_DEVICE_CHANGE, input_name='IRP_MJ_DEVICE_CHANGE'), namespace_, eol_))
        if self.IRP_MJ_QUERY_QUOTA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_QUERY_QUOTA>%s</%sIRP_MJ_QUERY_QUOTA>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_QUERY_QUOTA, input_name='IRP_MJ_QUERY_QUOTA'), namespace_, eol_))
        if self.IRP_MJ_SET_QUOTA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_SET_QUOTA>%s</%sIRP_MJ_SET_QUOTA>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_SET_QUOTA, input_name='IRP_MJ_SET_QUOTA'), namespace_, eol_))
        if self.IRP_MJ_PNP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIRP_MJ_PNP>%s</%sIRP_MJ_PNP>%s' % (namespace_, self.gds_format_integer(self.IRP_MJ_PNP, input_name='IRP_MJ_PNP'), namespace_, eol_))
        if self.Driver_Device_List is not None:
            self.Driver_Device_List.export(outfile, level, namespace_, name_='Driver_Device_List', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DriverType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.resultitemtype is not None and 'resultitemtype' not in already_processed:
            already_processed.add('resultitemtype')
            showIndent(outfile, level)
            outfile.write('resultitemtype=%d,\n' % (self.resultitemtype,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceKeyName is not None:
            showIndent(outfile, level)
            outfile.write('ServiceKeyName=%s,\n' % quote_python(self.ServiceKeyName).encode(ExternalEncoding))
        if self.ImagePath is not None:
            showIndent(outfile, level)
            outfile.write('ImagePath=%s,\n' % quote_python(self.ImagePath).encode(ExternalEncoding))
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%d,\n' % self.Type)
        if self.DriverObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('DriverObj_Location=%d,\n' % self.DriverObj_Location)
        if self.DeviceObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('DeviceObj_Location=%d,\n' % self.DeviceObj_Location)
        if self.Driver_Init is not None:
            showIndent(outfile, level)
            outfile.write('Driver_Init=%d,\n' % self.Driver_Init)
        if self.Driver_StartIO is not None:
            showIndent(outfile, level)
            outfile.write('Driver_StartIO=%d,\n' % self.Driver_StartIO)
        if self.Driver_Unload is not None:
            showIndent(outfile, level)
            outfile.write('Driver_Unload=%d,\n' % self.Driver_Unload)
        if self.BaseAddress is not None:
            showIndent(outfile, level)
            outfile.write('BaseAddress=%d,\n' % self.BaseAddress)
        if self.StartTime is not None:
            showIndent(outfile, level)
            outfile.write('StartTime=%s,\n' % quote_python(self.StartTime).encode(ExternalEncoding))
        if self.Dependencies is not None:
            showIndent(outfile, level)
            outfile.write('Dependencies=%s,\n' % quote_python(self.Dependencies).encode(ExternalEncoding))
        if self.Size is not None:
            showIndent(outfile, level)
            outfile.write('Size=%d,\n' % self.Size)
        if self.Instances is not None:
            showIndent(outfile, level)
            outfile.write('Instances=%d,\n' % self.Instances)
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.StartedAs is not None:
            showIndent(outfile, level)
            outfile.write('StartedAs=%s,\n' % quote_python(self.StartedAs).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%d,\n' % self.State)
        if self.RealState is not None:
            showIndent(outfile, level)
            outfile.write('RealState=%d,\n' % self.RealState)
        if self.StartMode is not None:
            showIndent(outfile, level)
            outfile.write('StartMode=%d,\n' % self.StartMode)
        if self.RealStartMode is not None:
            showIndent(outfile, level)
            outfile.write('RealStartMode=%d,\n' % self.RealStartMode)
        if self.RealType is not None:
            showIndent(outfile, level)
            outfile.write('RealType=%d,\n' % self.RealType)
        if self.Path is not None:
            showIndent(outfile, level)
            outfile.write('Path=%s,\n' % quote_python(self.Path).encode(ExternalEncoding))
        if self.plist is not None:
            showIndent(outfile, level)
            outfile.write('plist=%s,\n' % quote_python(self.plist).encode(ExternalEncoding))
        if self.MD5 is not None:
            showIndent(outfile, level)
            outfile.write('MD5=%d,\n' % self.MD5)
        if self.SHA1 is not None:
            showIndent(outfile, level)
            outfile.write('SHA1=%d,\n' % self.SHA1)
        if self.FuzzySize is not None:
            showIndent(outfile, level)
            outfile.write('FuzzySize=%d,\n' % self.FuzzySize)
        if self.Fuzzy is not None:
            showIndent(outfile, level)
            outfile.write('Fuzzy=%s,\n' % quote_python(self.Fuzzy).encode(ExternalEncoding))
        if self.Fuzzy2X is not None:
            showIndent(outfile, level)
            outfile.write('Fuzzy2X=%s,\n' % quote_python(self.Fuzzy2X).encode(ExternalEncoding))
        if self.KFFStatus is not None:
            showIndent(outfile, level)
            outfile.write('KFFStatus=%d,\n' % self.KFFStatus)
        if self.processid is not None:
            showIndent(outfile, level)
            outfile.write('processid=%d,\n' % self.processid)
        if self.IRP_MJ_CREATE is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_CREATE=%d,\n' % self.IRP_MJ_CREATE)
        if self.IRP_MJ_CREATE_NAMED_PIPE is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_CREATE_NAMED_PIPE=%d,\n' % self.IRP_MJ_CREATE_NAMED_PIPE)
        if self.IRP_MJ_CLOSE is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_CLOSE=%d,\n' % self.IRP_MJ_CLOSE)
        if self.IRP_MJ_READ is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_READ=%d,\n' % self.IRP_MJ_READ)
        if self.IRP_MJ_WRITE is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_WRITE=%d,\n' % self.IRP_MJ_WRITE)
        if self.IRP_MJ_QUERY_INFORMATION is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_QUERY_INFORMATION=%d,\n' % self.IRP_MJ_QUERY_INFORMATION)
        if self.IRP_MJ_SET_INFORMATION is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SET_INFORMATION=%d,\n' % self.IRP_MJ_SET_INFORMATION)
        if self.IRP_MJ_QUERY_EA is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_QUERY_EA=%d,\n' % self.IRP_MJ_QUERY_EA)
        if self.IRP_MJ_SET_EA is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SET_EA=%d,\n' % self.IRP_MJ_SET_EA)
        if self.IRP_MJ_FLUSH_BUFFERS is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_FLUSH_BUFFERS=%d,\n' % self.IRP_MJ_FLUSH_BUFFERS)
        if self.IRP_MJ_QUERY_VOLUME_INFORMATION is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_QUERY_VOLUME_INFORMATION=%d,\n' % self.IRP_MJ_QUERY_VOLUME_INFORMATION)
        if self.IRP_MJ_SET_VOLUME_INFORMATION is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SET_VOLUME_INFORMATION=%d,\n' % self.IRP_MJ_SET_VOLUME_INFORMATION)
        if self.IRP_MJ_DIRECTORY_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_DIRECTORY_CONTROL=%d,\n' % self.IRP_MJ_DIRECTORY_CONTROL)
        if self.IRP_MJ_FILE_SYSTEM_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_FILE_SYSTEM_CONTROL=%d,\n' % self.IRP_MJ_FILE_SYSTEM_CONTROL)
        if self.IRP_MJ_DEVICE_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_DEVICE_CONTROL=%d,\n' % self.IRP_MJ_DEVICE_CONTROL)
        if self.IRP_MJ_INTERNAL_DEVICE_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_INTERNAL_DEVICE_CONTROL=%d,\n' % self.IRP_MJ_INTERNAL_DEVICE_CONTROL)
        if self.IRP_MJ_SHUTDOWN is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SHUTDOWN=%d,\n' % self.IRP_MJ_SHUTDOWN)
        if self.IRP_MJ_LOCK_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_LOCK_CONTROL=%d,\n' % self.IRP_MJ_LOCK_CONTROL)
        if self.IRP_MJ_CLEANUP is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_CLEANUP=%d,\n' % self.IRP_MJ_CLEANUP)
        if self.IRP_MJ_CREATE_MAILSLOT is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_CREATE_MAILSLOT=%d,\n' % self.IRP_MJ_CREATE_MAILSLOT)
        if self.IRP_MJ_QUERY_SECURITY is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_QUERY_SECURITY=%d,\n' % self.IRP_MJ_QUERY_SECURITY)
        if self.IRP_MJ_SET_SECURITY is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SET_SECURITY=%d,\n' % self.IRP_MJ_SET_SECURITY)
        if self.IRP_MJ_POWER is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_POWER=%d,\n' % self.IRP_MJ_POWER)
        if self.IRP_MJ_SYSTEM_CONTROL is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SYSTEM_CONTROL=%d,\n' % self.IRP_MJ_SYSTEM_CONTROL)
        if self.IRP_MJ_DEVICE_CHANGE is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_DEVICE_CHANGE=%d,\n' % self.IRP_MJ_DEVICE_CHANGE)
        if self.IRP_MJ_QUERY_QUOTA is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_QUERY_QUOTA=%d,\n' % self.IRP_MJ_QUERY_QUOTA)
        if self.IRP_MJ_SET_QUOTA is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_SET_QUOTA=%d,\n' % self.IRP_MJ_SET_QUOTA)
        if self.IRP_MJ_PNP is not None:
            showIndent(outfile, level)
            outfile.write('IRP_MJ_PNP=%d,\n' % self.IRP_MJ_PNP)
        if self.Driver_Device_List is not None:
            showIndent(outfile, level)
            outfile.write('Driver_Device_List=model_.Driver_Device_ListType(\n')
            self.Driver_Device_List.exportLiteral(outfile, level, name_='Driver_Device_List')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('resultitemtype', node)
        if value is not None and 'resultitemtype' not in already_processed:
            already_processed.add('resultitemtype')
            try:
                self.resultitemtype = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceKeyName':
            ServiceKeyName_ = child_.text
            ServiceKeyName_ = self.gds_validate_string(ServiceKeyName_, node, 'ServiceKeyName')
            self.ServiceKeyName = ServiceKeyName_
        elif nodeName_ == 'ImagePath':
            ImagePath_ = child_.text
            ImagePath_ = self.gds_validate_string(ImagePath_, node, 'ImagePath')
            self.ImagePath = ImagePath_
        elif nodeName_ == 'Type':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Type')
            self.Type = ival_
        elif nodeName_ == 'DriverObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DriverObj_Location')
            self.DriverObj_Location = ival_
        elif nodeName_ == 'DeviceObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DeviceObj_Location')
            self.DeviceObj_Location = ival_
        elif nodeName_ == 'Driver_Init':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Driver_Init')
            self.Driver_Init = ival_
        elif nodeName_ == 'Driver_StartIO':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Driver_StartIO')
            self.Driver_StartIO = ival_
        elif nodeName_ == 'Driver_Unload':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Driver_Unload')
            self.Driver_Unload = ival_
        elif nodeName_ == 'BaseAddress':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'BaseAddress')
            self.BaseAddress = ival_
        elif nodeName_ == 'StartTime':
            StartTime_ = child_.text
            StartTime_ = self.gds_validate_string(StartTime_, node, 'StartTime')
            self.StartTime = StartTime_
        elif nodeName_ == 'Dependencies':
            Dependencies_ = child_.text
            Dependencies_ = self.gds_validate_string(Dependencies_, node, 'Dependencies')
            self.Dependencies = Dependencies_
        elif nodeName_ == 'Size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Size')
            self.Size = ival_
        elif nodeName_ == 'Instances':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Instances')
            self.Instances = ival_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'StartedAs':
            StartedAs_ = child_.text
            StartedAs_ = self.gds_validate_string(StartedAs_, node, 'StartedAs')
            self.StartedAs = StartedAs_
        elif nodeName_ == 'State':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'State')
            self.State = ival_
        elif nodeName_ == 'RealState':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RealState')
            self.RealState = ival_
        elif nodeName_ == 'StartMode':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'StartMode')
            self.StartMode = ival_
        elif nodeName_ == 'RealStartMode':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RealStartMode')
            self.RealStartMode = ival_
        elif nodeName_ == 'RealType':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RealType')
            self.RealType = ival_
        elif nodeName_ == 'Path':
            Path_ = child_.text
            Path_ = self.gds_validate_string(Path_, node, 'Path')
            self.Path = Path_
        elif nodeName_ == 'plist':
            plist_ = child_.text
            plist_ = self.gds_validate_string(plist_, node, 'plist')
            self.plist = plist_
        elif nodeName_ == 'MD5':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MD5')
            self.MD5 = ival_
        elif nodeName_ == 'SHA1':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SHA1')
            self.SHA1 = ival_
        elif nodeName_ == 'FuzzySize':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FuzzySize')
            self.FuzzySize = ival_
        elif nodeName_ == 'Fuzzy':
            Fuzzy_ = child_.text
            Fuzzy_ = self.gds_validate_string(Fuzzy_, node, 'Fuzzy')
            self.Fuzzy = Fuzzy_
        elif nodeName_ == 'Fuzzy2X':
            Fuzzy2X_ = child_.text
            Fuzzy2X_ = self.gds_validate_string(Fuzzy2X_, node, 'Fuzzy2X')
            self.Fuzzy2X = Fuzzy2X_
        elif nodeName_ == 'KFFStatus':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'KFFStatus')
            self.KFFStatus = ival_
        elif nodeName_ == 'processid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'processid')
            self.processid = ival_
        elif nodeName_ == 'IRP_MJ_CREATE':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_CREATE')
            self.IRP_MJ_CREATE = ival_
        elif nodeName_ == 'IRP_MJ_CREATE_NAMED_PIPE':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_CREATE_NAMED_PIPE')
            self.IRP_MJ_CREATE_NAMED_PIPE = ival_
        elif nodeName_ == 'IRP_MJ_CLOSE':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_CLOSE')
            self.IRP_MJ_CLOSE = ival_
        elif nodeName_ == 'IRP_MJ_READ':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_READ')
            self.IRP_MJ_READ = ival_
        elif nodeName_ == 'IRP_MJ_WRITE':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_WRITE')
            self.IRP_MJ_WRITE = ival_
        elif nodeName_ == 'IRP_MJ_QUERY_INFORMATION':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_QUERY_INFORMATION')
            self.IRP_MJ_QUERY_INFORMATION = ival_
        elif nodeName_ == 'IRP_MJ_SET_INFORMATION':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SET_INFORMATION')
            self.IRP_MJ_SET_INFORMATION = ival_
        elif nodeName_ == 'IRP_MJ_QUERY_EA':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_QUERY_EA')
            self.IRP_MJ_QUERY_EA = ival_
        elif nodeName_ == 'IRP_MJ_SET_EA':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SET_EA')
            self.IRP_MJ_SET_EA = ival_
        elif nodeName_ == 'IRP_MJ_FLUSH_BUFFERS':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_FLUSH_BUFFERS')
            self.IRP_MJ_FLUSH_BUFFERS = ival_
        elif nodeName_ == 'IRP_MJ_QUERY_VOLUME_INFORMATION':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_QUERY_VOLUME_INFORMATION')
            self.IRP_MJ_QUERY_VOLUME_INFORMATION = ival_
        elif nodeName_ == 'IRP_MJ_SET_VOLUME_INFORMATION':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SET_VOLUME_INFORMATION')
            self.IRP_MJ_SET_VOLUME_INFORMATION = ival_
        elif nodeName_ == 'IRP_MJ_DIRECTORY_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_DIRECTORY_CONTROL')
            self.IRP_MJ_DIRECTORY_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_FILE_SYSTEM_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_FILE_SYSTEM_CONTROL')
            self.IRP_MJ_FILE_SYSTEM_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_DEVICE_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_DEVICE_CONTROL')
            self.IRP_MJ_DEVICE_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_INTERNAL_DEVICE_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_INTERNAL_DEVICE_CONTROL')
            self.IRP_MJ_INTERNAL_DEVICE_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_SHUTDOWN':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SHUTDOWN')
            self.IRP_MJ_SHUTDOWN = ival_
        elif nodeName_ == 'IRP_MJ_LOCK_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_LOCK_CONTROL')
            self.IRP_MJ_LOCK_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_CLEANUP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_CLEANUP')
            self.IRP_MJ_CLEANUP = ival_
        elif nodeName_ == 'IRP_MJ_CREATE_MAILSLOT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_CREATE_MAILSLOT')
            self.IRP_MJ_CREATE_MAILSLOT = ival_
        elif nodeName_ == 'IRP_MJ_QUERY_SECURITY':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_QUERY_SECURITY')
            self.IRP_MJ_QUERY_SECURITY = ival_
        elif nodeName_ == 'IRP_MJ_SET_SECURITY':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SET_SECURITY')
            self.IRP_MJ_SET_SECURITY = ival_
        elif nodeName_ == 'IRP_MJ_POWER':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_POWER')
            self.IRP_MJ_POWER = ival_
        elif nodeName_ == 'IRP_MJ_SYSTEM_CONTROL':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SYSTEM_CONTROL')
            self.IRP_MJ_SYSTEM_CONTROL = ival_
        elif nodeName_ == 'IRP_MJ_DEVICE_CHANGE':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_DEVICE_CHANGE')
            self.IRP_MJ_DEVICE_CHANGE = ival_
        elif nodeName_ == 'IRP_MJ_QUERY_QUOTA':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_QUERY_QUOTA')
            self.IRP_MJ_QUERY_QUOTA = ival_
        elif nodeName_ == 'IRP_MJ_SET_QUOTA':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_SET_QUOTA')
            self.IRP_MJ_SET_QUOTA = ival_
        elif nodeName_ == 'IRP_MJ_PNP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IRP_MJ_PNP')
            self.IRP_MJ_PNP = ival_
        elif nodeName_ == 'Driver_Device_List':
            obj_ = Driver_Device_ListType.factory()
            obj_.build(child_)
            self.Driver_Device_List = obj_
            obj_.original_tagname_ = 'Driver_Device_List'
# end class DriverType


class Driver_Device_ListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Device=None):
        self.original_tagname_ = None
        if Device is None:
            self.Device = []
        else:
            self.Device = Device
    def factory(*args_, **kwargs_):
        if Driver_Device_ListType.subclass:
            return Driver_Device_ListType.subclass(*args_, **kwargs_)
        else:
            return Driver_Device_ListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Device(self): return self.Device
    def set_Device(self, Device): self.Device = Device
    def add_Device(self, value): self.Device.append(value)
    def insert_Device_at(self, index, value): self.Device.insert(index, value)
    def replace_Device_at(self, index, value): self.Device[index] = value
    def hasContent_(self):
        if (
            self.Device
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Driver_Device_ListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Driver_Device_ListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Driver_Device_ListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Driver_Device_ListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Driver_Device_ListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Device_ in self.Device:
            Device_.export(outfile, level, namespace_, name_='Device', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Driver_Device_ListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Device=[\n')
        level += 1
        for Device_ in self.Device:
            showIndent(outfile, level)
            outfile.write('model_.DeviceType(\n')
            Device_.exportLiteral(outfile, level, name_='DeviceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Device':
            obj_ = DeviceType.factory()
            obj_.build(child_)
            self.Device.append(obj_)
            obj_.original_tagname_ = 'Device'
# end class Driver_Device_ListType


class DeviceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, DeviceObj_Location=None, DriverObj_Location=None, NextDeviceObj_Location=None, AttachedDeviceObj_Location=None):
        self.original_tagname_ = None
        self.Name = Name
        self.DeviceObj_Location = DeviceObj_Location
        self.DriverObj_Location = DriverObj_Location
        self.NextDeviceObj_Location = NextDeviceObj_Location
        self.AttachedDeviceObj_Location = AttachedDeviceObj_Location
    def factory(*args_, **kwargs_):
        if DeviceType.subclass:
            return DeviceType.subclass(*args_, **kwargs_)
        else:
            return DeviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_DeviceObj_Location(self): return self.DeviceObj_Location
    def set_DeviceObj_Location(self, DeviceObj_Location): self.DeviceObj_Location = DeviceObj_Location
    def get_DriverObj_Location(self): return self.DriverObj_Location
    def set_DriverObj_Location(self, DriverObj_Location): self.DriverObj_Location = DriverObj_Location
    def get_NextDeviceObj_Location(self): return self.NextDeviceObj_Location
    def set_NextDeviceObj_Location(self, NextDeviceObj_Location): self.NextDeviceObj_Location = NextDeviceObj_Location
    def get_AttachedDeviceObj_Location(self): return self.AttachedDeviceObj_Location
    def set_AttachedDeviceObj_Location(self, AttachedDeviceObj_Location): self.AttachedDeviceObj_Location = AttachedDeviceObj_Location
    def hasContent_(self):
        if (
            self.Name is not None or
            self.DeviceObj_Location is not None or
            self.DriverObj_Location is not None or
            self.NextDeviceObj_Location is not None or
            self.AttachedDeviceObj_Location is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DeviceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeviceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DeviceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DeviceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DeviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.DeviceObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeviceObj_Location>%s</%sDeviceObj_Location>%s' % (namespace_, self.gds_format_integer(self.DeviceObj_Location, input_name='DeviceObj_Location'), namespace_, eol_))
        if self.DriverObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDriverObj_Location>%s</%sDriverObj_Location>%s' % (namespace_, self.gds_format_integer(self.DriverObj_Location, input_name='DriverObj_Location'), namespace_, eol_))
        if self.NextDeviceObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextDeviceObj_Location>%s</%sNextDeviceObj_Location>%s' % (namespace_, self.gds_format_integer(self.NextDeviceObj_Location, input_name='NextDeviceObj_Location'), namespace_, eol_))
        if self.AttachedDeviceObj_Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachedDeviceObj_Location>%s</%sAttachedDeviceObj_Location>%s' % (namespace_, self.gds_format_integer(self.AttachedDeviceObj_Location, input_name='AttachedDeviceObj_Location'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='DeviceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.DeviceObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('DeviceObj_Location=%d,\n' % self.DeviceObj_Location)
        if self.DriverObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('DriverObj_Location=%d,\n' % self.DriverObj_Location)
        if self.NextDeviceObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('NextDeviceObj_Location=%d,\n' % self.NextDeviceObj_Location)
        if self.AttachedDeviceObj_Location is not None:
            showIndent(outfile, level)
            outfile.write('AttachedDeviceObj_Location=%d,\n' % self.AttachedDeviceObj_Location)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'DeviceObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DeviceObj_Location')
            self.DeviceObj_Location = ival_
        elif nodeName_ == 'DriverObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DriverObj_Location')
            self.DriverObj_Location = ival_
        elif nodeName_ == 'NextDeviceObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NextDeviceObj_Location')
            self.NextDeviceObj_Location = ival_
        elif nodeName_ == 'AttachedDeviceObj_Location':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AttachedDeviceObj_Location')
            self.AttachedDeviceObj_Location = ival_
# end class DeviceType


GDSClassesMapping = {
    'Driver_Device_List': Driver_Device_ListType,
    'Device': DeviceType,
    'Driver': DriverType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'root'
        rootClass = root
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'root'
        rootClass = root
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'root'
        rootClass = root
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'root'
        rootClass = root
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from driverdatastructs import *\n\n')
        sys.stdout.write('import driverdatastructs as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DeviceType",
    "DriverType",
    "Driver_Device_ListType",
    "root"
]
